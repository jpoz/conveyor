// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jpoz/conveyor/wire (interfaces: HubServer,HubClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock_jobs.go -package=wire github.com/jpoz/conveyor/wire HubServer,HubClient
//
// Package wire is a generated GoMock package.
package wire

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockHubServer is a mock of HubServer interface.
type MockHubServer struct {
	ctrl     *gomock.Controller
	recorder *MockHubServerMockRecorder
}

// MockHubServerMockRecorder is the mock recorder for MockHubServer.
type MockHubServerMockRecorder struct {
	mock *MockHubServer
}

// NewMockHubServer creates a new mock instance.
func NewMockHubServer(ctrl *gomock.Controller) *MockHubServer {
	mock := &MockHubServer{ctrl: ctrl}
	mock.recorder = &MockHubServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHubServer) EXPECT() *MockHubServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHubServer) Add(arg0 context.Context, arg1 *AddRequest) (*AddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockHubServerMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHubServer)(nil).Add), arg0, arg1)
}

// Close mocks base method.
func (m *MockHubServer) Close(arg0 context.Context, arg1 *CloseRequest) (*CloseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(*CloseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockHubServerMockRecorder) Close(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHubServer)(nil).Close), arg0, arg1)
}

// Fail mocks base method.
func (m *MockHubServer) Fail(arg0 context.Context, arg1 *FailRequest) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fail", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fail indicates an expected call of Fail.
func (mr *MockHubServerMockRecorder) Fail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fail", reflect.TypeOf((*MockHubServer)(nil).Fail), arg0, arg1)
}

// Heartbeat mocks base method.
func (m *MockHubServer) Heartbeat(arg0 context.Context, arg1 *Checkin) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockHubServerMockRecorder) Heartbeat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockHubServer)(nil).Heartbeat), arg0, arg1)
}

// Pop mocks base method.
func (m *MockHubServer) Pop(arg0 context.Context, arg1 *PopRequest) (*WorkRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", arg0, arg1)
	ret0, _ := ret[0].(*WorkRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockHubServerMockRecorder) Pop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockHubServer)(nil).Pop), arg0, arg1)
}

// mustEmbedUnimplementedHubServer mocks base method.
func (m *MockHubServer) mustEmbedUnimplementedHubServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHubServer")
}

// mustEmbedUnimplementedHubServer indicates an expected call of mustEmbedUnimplementedHubServer.
func (mr *MockHubServerMockRecorder) mustEmbedUnimplementedHubServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHubServer", reflect.TypeOf((*MockHubServer)(nil).mustEmbedUnimplementedHubServer))
}

// MockHubClient is a mock of HubClient interface.
type MockHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockHubClientMockRecorder
}

// MockHubClientMockRecorder is the mock recorder for MockHubClient.
type MockHubClientMockRecorder struct {
	mock *MockHubClient
}

// NewMockHubClient creates a new mock instance.
func NewMockHubClient(ctrl *gomock.Controller) *MockHubClient {
	mock := &MockHubClient{ctrl: ctrl}
	mock.recorder = &MockHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHubClient) EXPECT() *MockHubClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHubClient) Add(arg0 context.Context, arg1 *AddRequest, arg2 ...grpc.CallOption) (*AddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockHubClientMockRecorder) Add(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHubClient)(nil).Add), varargs...)
}

// Close mocks base method.
func (m *MockHubClient) Close(arg0 context.Context, arg1 *CloseRequest, arg2 ...grpc.CallOption) (*CloseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Close", varargs...)
	ret0, _ := ret[0].(*CloseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockHubClientMockRecorder) Close(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHubClient)(nil).Close), varargs...)
}

// Fail mocks base method.
func (m *MockHubClient) Fail(arg0 context.Context, arg1 *FailRequest, arg2 ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fail", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fail indicates an expected call of Fail.
func (mr *MockHubClientMockRecorder) Fail(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fail", reflect.TypeOf((*MockHubClient)(nil).Fail), varargs...)
}

// Heartbeat mocks base method.
func (m *MockHubClient) Heartbeat(arg0 context.Context, arg1 *Checkin, arg2 ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Heartbeat", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockHubClientMockRecorder) Heartbeat(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockHubClient)(nil).Heartbeat), varargs...)
}

// Pop mocks base method.
func (m *MockHubClient) Pop(arg0 context.Context, arg1 *PopRequest, arg2 ...grpc.CallOption) (*WorkRequest, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pop", varargs...)
	ret0, _ := ret[0].(*WorkRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockHubClientMockRecorder) Pop(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockHubClient)(nil).Pop), varargs...)
}
